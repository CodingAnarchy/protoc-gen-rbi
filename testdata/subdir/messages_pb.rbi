# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: subdir/messages.proto
# typed: strict

module Testdata; end
module Testdata::Subdir; end

class Testdata::Subdir::IntegerMessage
  include Google::Protobuf
  include Google::Protobuf::MessageExts

  sig { params(args: T::Hash[T.untyped, T.untyped]).void }
  def initialize(args); end

  sig { returns(Integer) }
  def value
  end

  sig { params(value: Integer).void }
  def value=(value)
  end
end

class Testdata::Subdir::Empty
  include Google::Protobuf
  include Google::Protobuf::MessageExts
end

class Testdata::Subdir::AllTypes
  include Google::Protobuf
  include Google::Protobuf::MessageExts

  sig { params(args: T::Hash[T.untyped, T.untyped]).void }
  def initialize(args); end

  sig { returns(Float) }
  def double_value
  end

  sig { params(value: Float).void }
  def double_value=(value)
  end

  sig { returns(Float) }
  def float_value
  end

  sig { params(value: Float).void }
  def float_value=(value)
  end

  sig { returns(Integer) }
  def int32_value
  end

  sig { params(value: Integer).void }
  def int32_value=(value)
  end

  sig { returns(Integer) }
  def int64_value
  end

  sig { params(value: Integer).void }
  def int64_value=(value)
  end

  sig { returns(Integer) }
  def uint32_value
  end

  sig { params(value: Integer).void }
  def uint32_value=(value)
  end

  sig { returns(Integer) }
  def uint64_value
  end

  sig { params(value: Integer).void }
  def uint64_value=(value)
  end

  sig { returns(Integer) }
  def sint32_value
  end

  sig { params(value: Integer).void }
  def sint32_value=(value)
  end

  sig { returns(Integer) }
  def sint64_value
  end

  sig { params(value: Integer).void }
  def sint64_value=(value)
  end

  sig { returns(Integer) }
  def fixed32_value
  end

  sig { params(value: Integer).void }
  def fixed32_value=(value)
  end

  sig { returns(Integer) }
  def fixed64_value
  end

  sig { params(value: Integer).void }
  def fixed64_value=(value)
  end

  sig { returns(Integer) }
  def sfixed32_value
  end

  sig { params(value: Integer).void }
  def sfixed32_value=(value)
  end

  sig { returns(Integer) }
  def sfixed64_value
  end

  sig { params(value: Integer).void }
  def sfixed64_value=(value)
  end

  sig { returns(T::Boolean) }
  def bool_value
  end

  sig { params(value: T::Boolean).void }
  def bool_value=(value)
  end

  sig { returns(String) }
  def string_value
  end

  sig { params(value: String).void }
  def string_value=(value)
  end

  sig { returns(String) }
  def bytes_value
  end

  sig { params(value: String).void }
  def bytes_value=(value)
  end

  sig { returns(Symbol) }
  def enum_value
  end

  sig { params(value: T.any(Symbol, Integer)).void }
  def enum_value=(value)
  end

  sig { returns(Symbol) }
  def alias_enum_value
  end

  sig { params(value: T.any(Symbol, Integer)).void }
  def alias_enum_value=(value)
  end

  sig { returns(T.nilable(Testdata::Subdir::IntegerMessage)) }
  def nested_value
  end

  sig { params(value: T.nilable(Testdata::Subdir::IntegerMessage)).void }
  def nested_value=(value)
  end

  sig { returns(T::Array[T.nilable(Testdata::Subdir::IntegerMessage)]) }
  def repeated_nested_value
  end

  sig { params(value: T::Array[T.nilable(Testdata::Subdir::IntegerMessage)]).void }
  def repeated_nested_value=(value)
  end

  sig { returns(T::Array[Integer]) }
  def repeated_int32_value
  end

  sig { params(value: T::Array[Integer]).void }
  def repeated_int32_value=(value)
  end

  sig { returns(T::Array[Symbol]) }
  def repeated_enum
  end

  sig { params(value: T::Array[T.any(Symbol, Integer)]).void }
  def repeated_enum=(value)
  end

  sig { returns(T.nilable(Testdata::Subdir::AllTypes::InnerMessage)) }
  def inner_value
  end

  sig { params(value: T.nilable(Testdata::Subdir::AllTypes::InnerMessage)).void }
  def inner_value=(value)
  end

  sig { returns(T.nilable(Testdata::Subdir::IntegerMessage::InnerNestedMessage)) }
  def inner_nested_value
  end

  sig { params(value: T.nilable(Testdata::Subdir::IntegerMessage::InnerNestedMessage)).void }
  def inner_nested_value=(value)
  end

  sig { returns(String) }
  def name
  end

  sig { params(value: String).void }
  def name=(value)
  end

  sig { returns(T::Boolean) }
  def sub_message
  end

  sig { params(value: T::Boolean).void }
  def sub_message=(value)
  end

  sig { returns(T::Hash[String, T.nilable(Testdata::Subdir::IntegerMessage)]) }
  def string_map_value
  end

  sig { params(value: Google::Protobuf::Map).void }
  def string_map_value=(value)
  end

  sig { returns(T::Hash[Integer, T.nilable(Testdata::Subdir::IntegerMessage)]) }
  def int32_map_value
  end

  sig { params(value: Google::Protobuf::Map).void }
  def int32_map_value=(value)
  end

  sig { returns(T::Hash[String, Symbol]) }
  def enum_map_value
  end

  sig { params(value: Google::Protobuf::Map).void }
  def enum_map_value=(value)
  end
end

class Testdata::Subdir::IntegerMessage::InnerNestedMessage
  include Google::Protobuf
  include Google::Protobuf::MessageExts

  sig { params(args: T::Hash[T.untyped, T.untyped]).void }
  def initialize(args); end

  sig { returns(Float) }
  def value
  end

  sig { params(value: Float).void }
  def value=(value)
  end
end

class Testdata::Subdir::IntegerMessage::NestedEmpty
  include Google::Protobuf
  include Google::Protobuf::MessageExts
end

class Testdata::Subdir::AllTypes::InnerMessage
  include Google::Protobuf
  include Google::Protobuf::MessageExts

  sig { params(args: T::Hash[T.untyped, T.untyped]).void }
  def initialize(args); end

  sig { returns(String) }
  def value
  end

  sig { params(value: String).void }
  def value=(value)
  end
end

module Testdata::Subdir::AllTypes::Corpus
  UNIVERSAL = T.let(0, Integer)
  WEB = T.let(1, Integer)
  IMAGES = T.let(2, Integer)
  LOCAL = T.let(3, Integer)
  NEWS = T.let(4, Integer)
  PRODUCTS = T.let(5, Integer)
  VIDEO = T.let(6, Integer)

  sig { params(value: Integer).returns(Symbol) }
  def self.lookup(value)
  end
end

module Testdata::Subdir::AllTypes::EnumAllowingAlias
  UNKNOWN = T.let(0, Integer)
  STARTED = T.let(1, Integer)
  RUNNING = T.let(1, Integer)

  sig { params(value: Integer).returns(Symbol) }
  def self.lookup(value)
  end
end
